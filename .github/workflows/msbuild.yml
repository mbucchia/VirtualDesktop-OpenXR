name: MSBuild

on:
  push:
    branches:
    - main
    - release/*
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
    - main
    - release/*
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: VirtualDesktop-OpenXR.sln

jobs:
  build:
    runs-on: windows-latest
    environment: build-and-sign

    steps:
    - name: Checkout project
      uses: actions/checkout@v2
    
    - name: Checkout submodules
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: git submodule update --init

    - name: Setup DevEnv
      uses: seanmiddleditch/gha-setup-vsdevenv@v4

    - name: Setup Python
      uses: actions/setup-python@v2.3.1
      with:
        python-version: 3.8

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
    #  env:
    #    PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
    #    PFX_NAME: "comodo"
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        # Need to build vdproj. We must invoke this tool from inside its own folder.
        $DisableOutOfProcBuild=$(vswhere -latest -find  **\DisableOutOfProcBuild.exe)
        Push-Location $(Split-Path $DisableOutOfProcBuild)
        & $DisableOutOfProcBuild
        Pop-Location
        
        # Standalone version (with installer).
        devenv.com ${{env.SOLUTION_FILE_PATH}} /Build "Release|Win32"
        devenv.com ${{env.SOLUTION_FILE_PATH}} /Build "Release|x64"

        # Virtual Desktop bundle.
        devenv.com ${{env.SOLUTION_FILE_PATH}} /Build "ReleaseBundle|Win32"
        devenv.com ${{env.SOLUTION_FILE_PATH}} /Build "ReleaseBundle|x64"
        copy bin/Win32/ReleaseBundle/virtualdesktop-openxr-32.dll bin/x64/ReleaseBundle/
        copy bin/Win32/ReleaseBundle/virtualdesktop-openxr-32.json bin/x64/ReleaseBundle/
        copy scripts/VirtualDesktopOpenXR.wprp bin/x64/ReleaseBundle/
        copy scripts/Capture-ETL.bat bin/x64/ReleaseBundle/
        copy LICENSE bin/x64/ReleaseBundle/
        copy THIRD_PARTY bin/x64/ReleaseBundle/

    #- name: Signing
    #  env:
    #    PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
    #    PFX_NAME: "comodo"
    #  working-directory: ${{env.GITHUB_WORKSPACE}}
    #  run: |
    #    $pfxName = if ($env:PFX_NAME) { $env:PFX_NAME } else { "selfsigncert" };
    #    installer/signtool.exe sign /d "VirtualDesktop-OpenXR" /du "https://github.com/mbucchia/VirtualDesktop-OpenXR" /f installer/$pfxName.pfx /p "$env:PFX_PASSWORD" /v installer/output/VirtualDesktopXR.msi

    - name: Publish
      uses: actions/upload-artifact@v4
      with:
        name: Setup
        path: |
          installer/output/VirtualDesktopXR.msi

    - name: Publish
      uses: actions/upload-artifact@v4
      with:
        name: Bundle
        path: |
          bin/x64/ReleaseBundle/virtualdesktop-openxr.dll
          bin/x64/ReleaseBundle/virtualdesktop-openxr.json
          bin/x64/ReleaseBundle/virtualdesktop-openxr-32.dll
          bin/x64/ReleaseBundle/virtualdesktop-openxr-32.json
          bin/x64/ReleaseBundle/VirtualDesktopOpenXR.wprp
          bin/x64/ReleaseBundle/Capture-ETL.bat
          bin/x64/ReleaseBundle/LICENSE
          bin/x64/ReleaseBundle/THIRD_PARTY

    - name: Publish Symbols
      uses: actions/upload-artifact@v4
      with:
        name: Symbols
        path: |
          bin/Win32/Release/virtualdesktop-openxr-32.pdb
          bin/x64/Release/virtualdesktop-openxr.pdb
